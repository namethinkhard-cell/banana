const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronTimer', {
  startTimer: (apps, timeout) => ipcRenderer.invoke('start-timer', apps, timeout),
  stopTimer: () => ipcRenderer.invoke('stop-timer'),
  resetTimer: () => ipcRenderer.invoke('reset-timer'),
  getTimerSeconds: () => ipcRenderer.invoke('get-timer-seconds'),
  setTimerSeconds: (seconds) => ipcRenderer.invoke('set-timer-seconds', seconds),
  getOpenApps: () => ipcRenderer.invoke('get-open-apps'),
  getTrackingStatus: () => ipcRenderer.invoke('get-tracking-status'),
  getTrackedApps: () => ipcRenderer.invoke('get-tracked-apps'),
  updateTrackedApps: (apps) => ipcRenderer.invoke('update-tracked-apps', apps),
  getPausedStatus: () => ipcRenderer.invoke('get-paused-status'),
  openMiniWindow: () => ipcRenderer.invoke('open-mini-window'),
  closeMiniWindow: () => ipcRenderer.invoke('close-mini-window'),
  toggleMiniWindow: () => ipcRenderer.invoke('toggle-mini-window'),
  resizeMiniWindow: (width, height) => ipcRenderer.invoke('resize-mini-window', width, height),
  getMiniWindowSize: () => ipcRenderer.invoke('get-mini-window-size'),
  updateMouseActivity: () => ipcRenderer.invoke('update-mouse-activity'),
  setMouseInactivityTimeout: (timeout) => ipcRenderer.invoke('set-mouse-inactivity-timeout', timeout),
  getMouseInactivityTimeout: () => ipcRenderer.invoke('get-mouse-inactivity-timeout'),
  setAlwaysOnTop: (enabled) => ipcRenderer.invoke('set-always-on-top', enabled),
  getAlwaysOnTop: () => ipcRenderer.invoke('get-always-on-top'),
  setWindowOpacity: (opacity) => ipcRenderer.invoke('set-window-opacity', opacity),
  updateMiniImage: (imageData, dimensions) => ipcRenderer.invoke('update-mini-image', imageData, dimensions),
  getCustomImage: () => ipcRenderer.invoke('get-custom-image'),
  getStoredImageData: () => ipcRenderer.invoke('get-stored-image-data'),
  setStoredImageData: (data) => ipcRenderer.invoke('set-stored-image-data', data),
  registerShortcut: (shortcut) => ipcRenderer.invoke('register-shortcut', shortcut),
  onTimerUpdate: (callback) => ipcRenderer.on('timer-update', (event, seconds) => callback(seconds)),
  onTimerStoppedInactive: (callback) => ipcRenderer.on('timer-stopped-inactive', () => callback()),
  onTrackingStatus: (callback) => ipcRenderer.on('tracking-status', (event, status) => callback(status)),
  onTimerPausedStatus: (callback) => ipcRenderer.on('timer-paused-status', (event, isPaused) => callback(isPaused)),
  onCustomImageUpdate: (callback) => ipcRenderer.on('custom-image-update', (event, imageData) => callback(imageData)),
  onShortcutTriggered: (callback) => ipcRenderer.on('shortcut-triggered', () => callback()),
  updateCoopRoomData: (roomCode, userId, username) => ipcRenderer.invoke('update-coop-room-data', roomCode, userId, username),
  getCoopRoomData: () => ipcRenderer.invoke('get-coop-room-data'),
  onCoopRoomDataUpdate: (callback) => ipcRenderer.on('coop-room-data-update', (event, data) => callback(data)),
  updateCoopUsers: (users) => ipcRenderer.invoke('update-coop-users', users),
  onCoopUsersUpdate: (callback) => ipcRenderer.on('coop-users-update', (event, users) => callback(users)),
  // Auto-updater methods
  checkForUpdates: () => ipcRenderer.invoke('check-for-updates'),
  downloadUpdate: () => ipcRenderer.invoke('download-update'),
  installUpdate: () => ipcRenderer.invoke('install-update'),
  onUpdateStatus: (callback) => ipcRenderer.on('update-status', (event, status) => callback(status))
});